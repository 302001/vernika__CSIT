//linked list impelementation

package LinkedList;
import java.util.*;
public class implement 
{
    public static class Node
    {
        int data;
        Node next;
    }
    public static class LinkedList
    {
        int size;
        Node head;
        Node tail;

        void addLast(int val)
        {
            Node temp=new Node();
            temp.data=val;
            temp.next=null;
            if(size==0)
            {
                head=tail=temp;
            }
            else
            {
                tail.next=temp;
                tail=temp;
            }
            size++;
        }
        int Size()
        {
            return size;
        }
        void display()
        {
            Node temp=head;
            while(temp!=null)
            {
                if(temp==tail)
                    System.out.print(temp.data);
                else
                    System.out.print(temp.data+"->");
                temp=temp.next;
            }
            System.out.println();
            
        }
        void removeFirst()
        {
            if(size==0)
            {
                System.out.println("Invalid Argument");
            }
            else if(size==1)
            {
                head=tail=null;
                size=0;
            }
            else
            {
                head=head.next;
            }
            size--;
        }
        int getFirst()
        {
            if(size==0)
            {
                System.out.println("List is empty");
                return -1;
            }
            return head.data;
        }
        int getLast()
        {
            if(size==0)
            {
                System.out.println("List is empty");
                return -1;
            }
            return tail.data;
           
        }
        int getAtidx(int idx)
        {
            if(size==0)
            {
                System.out.println("List is empty");
                return -1;
            }
            else if(idx<0||idx>size)
            {
                System.out.println("Invalid arguments");
                return -1;
            }
            Node temp=head;
            for(int i=0;i<idx-1;i++)
            {
                temp=temp.next;
            }
            return temp.data;
        } 
        void addFirst(int val)
        {
            Node temp=new Node();
            temp.data=val;
            temp.next=head;
            head=temp;
            if(size==0)
            {
                head=tail=temp;
            }
            size++;
        }
        void removeLast()
        {
            if(size==0)
            {
                System.out.println("List is empty");
                return;
            }
            else if(size==1)
            {
                head=tail=null;
                size=0;
                return;
            }
            Node temp=head;
            for(int i=0;i<size-2;i++)
                temp=temp.next;

            tail=temp;
            temp.next=null;
            size--;

            
        }

    }

    public static void main(String[] args) 
    {
        Scanner scn=new Scanner(System.in);
        LinkedList ll=new LinkedList();
        int ch;

        do
        {
            System.out.println("Choose the operation ------ >");
            System.out.println(" 1 -> add Last \n 2 -> Display the list \n 3 -> Display the size \n 4 -> remove the first element \n 5 -> get first element \n 6 -> get last element \n 7 -> get value of any index \n 8 -> add elemnet in first \n 9 -> Remove the last element");
            
            ch=scn.nextInt();
            switch(ch)
                {
                    case 1:
                    {
                        ll.addLast(scn.nextInt());
                        break;
                    }
                    case 2:
                    {
                        ll.display();
                        break;
                    }
                    case 3:
                    {
                        System.out.println(ll.Size());
                        break;
                    }
                    case 4:
                    {
                        ll.removeFirst();
                        break;
                    }
                    case 5:
                    {
                        System.out.println(ll.getFirst());
                        break;
                    }
                    case 6:
                    {
                        System.out.println(ll.getLast());
                        break;
                    }
                    case 7:
                    {
                        System.out.println(ll.getAtidx(scn.nextInt()));
                        break;
                    }
                    case 8:
                    {
                        ll.addFirst(scn.nextInt());
                        break;
                    }
                    case 9:
                    {
                        ll.removeLast();
                        break;
                    }

                    case -1:
                    {
                        System.out.println("Thanks");
                        System.exit(0);
                    }
                    default:
                        System.out.println("Invalid argument");
                }
            }while(ch!=-1);
       
        scn.close();
    }
    
}
